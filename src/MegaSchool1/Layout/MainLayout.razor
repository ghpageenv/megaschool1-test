@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using MegaSchool1.Components
@using MegaSchool1.Dialog
@using MegaSchool1.Model
@using MegaSchool1.Repository.Model
@using MegaSchool1.ViewModel
@using OneOf.Types
@implements IDisposable
@inject NavigationManager MyNavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Repository.Repository Repo
@inject IDialogService Dialog

<PageTitle>@((IsCapturePage ? "MWR" : $"{GetTitle()} | Mega School 1"))</PageTitle>

<HeadContent>
    <!-- Open Graph / Facebook -->
    <meta property="og:url" content="@NavigationManager.Uri" />

    <!-- Twitter -->
    <meta property="twitter:url" content="@NavigationManager.Uri" />
</HeadContent>

<MudThemeProvider Theme="@((IsCapturePage ? _capturePageTheme : new() { Palette = new PaletteDark() }))" />
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (IsCapturePage)
{
    <div class="page mud-layout" style="background-color:rgb(22,19,44);">

        <main>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                @Body
            </MudContainer>
        </main>
    </div>
}
else
{
    <div class="page mud-layout">

        <div class="sidebar mud-elevation-1">
            <div class="top-row mud-drawer-head" style="background-color:@(Colors.Green.Default);">
                <div>
                    <a href="https://www.ms1.megaschool.me/" target="_blank" class="ml-2 navbar-brand">Mega School 1</a>
                </div>
            </div>

            <input type="checkbox" title="Navigation menu" class="navbar-toggler" />
            <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
                <CascadingValue Value="_appState">
                    <NavMenu />
                </CascadingValue>
            </div>

        </div>

        <main>
            <div class="top-row px-4" style="background-color:@(Colors.Green.Default);">
                <MudStack Row="true" Style="width:100%;">
                    @if (_componentInitialized)
                    {
                        @if (ProspectMode)
                        {
                            <MudButton OnClick="ShowUsernameEditDialog" EndIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary">Set Member ID</MudButton>
                        }
                        else
                        {
                            if (_appState.AppIsInstallable)
                            {
                                <MudButton OnClick="OnInstallClick" EndIcon="@Icons.Material.Filled.InstallMobile" Variant="Variant.Filled" Color="Color.Primary">Install</MudButton>
                                <MudIconButton OnClick="@(() => _showInstallInstructions = true)" Icon="@Icons.Material.Filled.OndemandVideo" aria-label="video" Variant="Variant.Filled" Color="Color.Primary" />
                            }
                            else
                            {
                                <MudStack Row="true">
                                    <MudText Style="color:white;">Hello @(_appState.User.Name) <MudIconButton OnClick="ShowUsernameEditDialog" Icon="@Icons.Material.Filled.Edit" /></MudText>
                                </MudStack>
                            }
                        }
                    }
                    <MudSpacer/>
                    <MudText Style="color:white;">@GetTitle()</MudText>
                </MudStack>
            </div>

            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                <CascadingValue Value="_appState">
                    @Body
                    @if (_showAppUpdatePrompt)
                    {
                        <MudFab Style="position:fixed; bottom:0; right:0; padding-right:5;"
                                Color="Color.Primary"
                                EndIcon="@Icons.Material.Filled.Refresh"
                                OnClick="@(e => NavigationManager.NavigateTo(Util.MakeUrlBypassBrowserCache(NavigationManager.BaseUri), true))"
                                Label="Load Update" />
                    }
                    <MudScrollToTop>
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
                    </MudScrollToTop>
                </CascadingValue>
            </MudContainer>
        </main>
    </div>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<MudDialog @bind-IsVisible="_showInstallInstructions" Options="@(new DialogOptions() { FullScreen = true })">
    <TitleContent>
        <Centered><MudButton Color="Color.Primary" OnClick="@(() => _showInstallInstructions = false)">Close</MudButton></Centered>
        <br/>
        <MudText Align="Align.Center">App Installation Instructions</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height:100vh; overflow-y: scroll;">
            <MudStack>
                <MudCard>
                    <MudText Align="Align.Center">Android</MudText>
                    <br/>
                    <video width="100%" controls>
                        <source src="@Constants.AppInstallTutorialUrl" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </MudCard>
                <MudCard>
                    <MudStack>
                        <MudText Align="Align.Center">iPhone</MudText>
                        <MudText Align="Align.Center">Coming Soon!</MudText>
                    </MudStack>
                </MudCard>
            </MudStack>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private static MainLayout? Instance;

    private readonly AppState _appState = new();

    private readonly MudTheme _capturePageTheme = new()
    {
        Palette = new PaletteDark()
        {
            Background = "rgb(22,19,44)",
        }
    };

    private bool _showAppUpdatePrompt;
    private bool _componentInitialized;
    private DotNetObjectReference<MainLayout>? _thisComponentReference;
    private bool _showInstallInstructions;

    public void Dispose()
    {
        _thisComponentReference?.Dispose();
    }

    private bool IsCapturePage =>
        NavigationManager.Uri.Contains("/72/")
        || NavigationManager.Uri.Contains("/promo/", StringComparison.InvariantCultureIgnoreCase)
        || NavigationManager.Uri.Contains("/thankyou/", StringComparison.InvariantCultureIgnoreCase)
        || Enum.GetValues<Content>().Any(content => NavigationManager.Uri.Contains($"/{content}/", StringComparison.InvariantCultureIgnoreCase));

    private bool IsCarPurchasePage => NavigationManager.Uri.Contains("/carpurchase");

    private bool IsWhitelistedProspectPage =>
        IsCapturePage 
        || IsCarPurchasePage
        || NavigationManager.Uri.Contains("/trustfundmybaby");

    private bool ProspectMode => _appState.User == null;

    private void ShowUsernameEditDialog()
    {
        var parameters = new DialogParameters<EditUsernameDialog> { { x => x.AppState, _appState } };
        var options = new DialogOptions() { NoHeader = true };

        Dialog.Show<EditUsernameDialog>("72-Hour Money Challenge", parameters, options);
    }

    protected async void OnInstallClick()
    {
        _thisComponentReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("promptToInstall", _thisComponentReference);
    }

    private void NavigateToProspectPageIfApplicable()
    {
        if (ProspectMode && !IsWhitelistedProspectPage)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}carpurchase");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _componentInitialized = true;

        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        // get user info
        var settings = await Repo.GetSettingsAsync();

        if (settings.User != null)
        {
            var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(settings.User.MemberId);
       
            _appState.User = Util.Sanitize(settings.User, marketingDirector, settings.User.GivBuxCode);
        }
        else if (!string.IsNullOrWhiteSpace(settings.Username))
        {
            var marketingDirector = await Repo.GetMarketingDirectorInfoAsync(settings.Username);

            _appState.User = Util.Sanitize(new Model.Repository.TeamMember() with { MemberId = settings.Username }, marketingDirector, settings.GivBuxCode);
        }

        this.StateHasChanged();

        // navigate to prospect page if applicable
        this.NavigateToProspectPageIfApplicable();
        
        // start checking for updates
        _ = CheckForUpdatesAsync();

        // show install button if applicable
        var maxInstallationStatusWaitTime = Task.Delay(10 * 1000);
        var keepCheckingInstallationStatus = true;
        while (keepCheckingInstallationStatus && !maxInstallationStatusWaitTime.IsCompleted)
        {
            var installationStatusReady = await JSRuntime.InvokeAsync<bool>("appInstallationStatusReady");
            if (installationStatusReady)
            {
                _appState.AppIsInstallable = (await JSRuntime.InvokeAsync<bool>("appIsInstallable"));
                keepCheckingInstallationStatus = false;
            }
            else
            {
                await Task.Delay(2 * 1000);
            }
        }

        Instance = this;
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
       this.NavigateToProspectPageIfApplicable();
    }

    public static void Refresh()
    {
        Instance?.StateHasChanged();
    }

    private async Task CheckForUpdatesAsync()
    {
        while (true)
        {
            var updateAvailable = await Util.UpdateAvailableAsync(Http);
            if(updateAvailable)
            {
                _showAppUpdatePrompt = true;
                this.StateHasChanged();
            }

            // check for updates every 5 minutes
            await Task.Delay(TimeSpan.FromMinutes(5));
        }
    }

    [JSInvokable]
    public static void OnAppInstalled()
    {
        if (Instance != null)
        {
             _ = Instance.InvokeAsync(() =>
             {
                 Instance._appState.AppIsInstallable = false;
                 Instance.StateHasChanged();
             });
        }
    }

    private string GetTitle()
    {
        var page = MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);

        return page switch
        {
            "" => "Words",
            "ipr" => "Instant Pay Raise",
            "shareables" => "Shareables",
            "settings" => "Settings",
            "faststartchecklist" => "Fast Start",
            "revenuesharing" => "Revenue Sharing",
            "events" => "Events",
            "pipleline" => "Pipeline",
            "testimonials" => "Testimonials",
            "wealthmap" => "Wealth Map",
            "carpurchase" => "First Car Purchase",
            "par" => "Personal Activity Report",
            "experimental" => "Experimental",
            "training" => "Trainings",
            "trustfundmybaby" => "Trust Fund My Baby",
            _ => string.Empty
        };
    }
}